cout << fixed << setprecision(10);      // #include<iomapip>

cout << setfill('0') << setw(2) << something;      // #include<iomanip>

template <typename T>
T max(T x, T y, T z){ ...}

numeric_limits<int>::max();        // #include<limits>

bool(A & 1);             // test if int A is odd (1) / even

time_t now = time(0);              // #include<ctime>
char * ch = ctime(&now);
cout << ch;

sleep(500)               // 500 is in miliseconds
system("cls")
system("color 1")        // #include<windows.h>

--------------------------------------------------------------------
----------------------------- @String ------------------------------

char ch = getchar();

stirng wow;
getline(cin, wow);

char dest[50];
char ch = 'a';
memset(dest, ch, 20);           // dest = "aaaaaaaaaaaaaaaaaaaa";

toupper(char);
tolower(char);
str.substr(5,2)

stoi(str)      // string to int
stof(str)      // string to float
stod(str)      // string to double

str i = to_string(n);         // convert int to string

strlen(str);
strstr(s1, s2);        // finds the first occurrence of the string s2 in the string s1
strchr(s1, ch);        // finds the first occurrence of the char ch in the string s1
strrchr(s1, ch);       // finds the last occurrence of the char ch in the string s1
strcmp(s1, s2);        // compare string s1 with s2 (positive value if s1 is greater)
strncmp(string1, string2, n);
strcat(string1, string2);
strncat(string1, string2, n);
strcpy(string1, string2);
strncpy(string1, string2, n);
memcpy(destination, source, sizeof(source));

transform(word.begin(), word.end(), word.begin(), ::toupper);    // uppercase string

for (auto &c: word) c = toupper(c);           // uppercase string

my_str.erase(remove(my_str.begin(), my_str.end(), 'A'), my_str.end());     // remove A from string

int cnt = count(str.begin(), str.end(), 'e');         // Counting occurrences in a string

---------------------------------------------------------------------
----------------------------- @Math ---------------------------------

abs(-130);
ceil(2.6);          // returns 3
floor(2.6);         // returns 2
exp(5);             // e^5
pow(2,5);           // 2^5
sqrt(64);
round(2.6);
log(2);             // natural logarithm (base-e)
log2(2);            // base-2
log10(2);           // base-10
min(a, b)
max(a, b)
min(a, b, cmp)           // we can create a bool compare function for it

--------------------------------------------------------------------
----------------------------- @Vector ------------------------------

V.empty();          // check vector if empty

V.pop_back()
V.erase(V.begin())       // V.pop_front() XD

V.erase(V.begin(), V.begin()+3)         // remove 3 frist elements
V.clear()
V.resize(6, 0)

int sum = accumulate(all(v), 0);      // sum of values (start with 0)
long long sum = accumulate(all(v), (long long) 0);      // maybe sum does not fit in int

double product = accumulate(all(v), double(1), multiplies < double > ());   // product of values (don’t forget to start with 1)

int r = inner_product(all(v1), v2.begin(), 0);    // scalar product of two intervals
int r = inner_product(all(v1), v2.rbegin(), 0);

vector<int> vec{10, 20, 30, 40};
vector<int>::iterator it;
it = find(vec.begin(), vec.end(), 30)
cout << it - vec.begin();

v.erase(find(a.begin(),a.end(),2));

vector < vector < int > > Matrix(N, vector < int > (M, -1));          // create 2 dimensional vector

int v1 = *max_element(data.begin(), data.end());          // Returns value of max element in vector
int i1 = max_element(data.begin(), data.end()) - data.begin();    // Returns index of min element in vector

int cnt = count(vec.begin(), vec.end(), 3);             // Counting occurrences in a vector

--------------------------------------------------------------------
----------------------------- @Map ---------------------------------

map<string, int> dic;
dic["one"] = 1;
dic["two"] = 2;
dic["three"] = 3;
dic.insert(make_pair("four", 4));
dic.insert(pair<string, int>("five", 5));

map<string, int>::iterator it;
for(it=dic.begin(); it!=dic.end(); ++it){
  cout << it->first << " => " << it->second << '\n';
}

--------------------------------------------------------------------
----------------------------- @Set ---------------------------------

set<int> S;

S.insert(value);
S.erase(value);

if (S.find(42) != S.end()) {
  // 42 presents in set
} else {
  // 42 not presents in set
}

void f(const map < string, int > & M) {
  if (M[“the meaning”] == 42)
  {
    // Error! Cannot use [] on const map objects!
  }
  if (M.find(“the meaning”) != M.end() && M.find(“the meaning”) -> second == 42)
  { 
    // Correct
    cout << “Don’t Panic!” << endl;
  }
}


int data1[] = {1, 2, 3, 4, 5};
int data2[] = {2, 5, 6, 7, 8};
vector <int> v1(data1, data1 + sizeof(data1) / sizeof(data1[0]));
vector <int> v2(data2, data2 + sizeof(data2) / sizeof(data2[0]));

// Important operations on sets
set<int> v1 = {1, 2, 3, 4, 5};
set<int> v2 = {4, 5, 6, 7, 8};
vector<int> tmp(max(v1.size(), v2.size()));
vector<int> ans1 = vector<int>(tmp.begin(), set_difference(all(v1), all(v2), tmp.begin()));
vector<int> ans2 = vector<int>(tmp.begin(), set_intersection(all(v1), all(v2), tmp.begin()));
vector<int> ans3 = vector<int>(tmp.begin(), set_symmetric_difference(all(v1), all(v2), tmp.begin()));
vector<int> ans4 = vector<int>(tmp.begin(), set_union(all(v1), all(v2), tmp.begin()));

// number of elements in operations
int cnt = set_intersection(all(v1), all(v2), tmp.begin())– tmp.begin();

--------------------------------------------------------------------
--------------------------- @Binary --------------------------------

int n = 156;
int base = 2;
char str[33];
itoa(n, str, base);      // str = 10011100

int a = 11;
bitset<8> x(a);          // x is '00001011'   #include<bitset>

--------------------------------------------------------------------
-------------------- @Frequently used functions --------------------

int cnt_str(str s, str target)
{
    int occurrences = 0;
    std::string::size_type pos = 0;
    while ((pos = s.find(target, pos)) != std::string::npos)
    {
        ++occurrences;
        pos += target.length();
    }
    return occurrences;
}         // count occurrences of substring whitin string

--------------------------------------------------------------------

struct point
{
     int x,y;
};
bool cmp(point i1, point i2)
{
     return (i1.x > i2.x);
}
sort(V.begin(), V.end(), cmp);    // Vector sorting by our comparison function

--------------------------------------------------------------------

// function to return Greatest common divisor of two numbers
long long gcd(long long a, long long b) {
    while (b != 0) {
        a %= b;
        swap(a, b);
    }
    return a;
}

 
// function to return Least common multiple of two numbers  
long long lcm(long long a, long long b) {
    return (a / gcd(a, b)) * b;
}


--------------------------------------------------------------------

bool isprime(int n)
{
    // corner case
    if (n <= 1)
        return false;
    // check from 2 to sqrt(n)
    for (int i = 2; i * i <= n; ++i)
        if (n % i == 0)
            return false;
    return true;
}

--------------------------------------------------------------------

vector<bool> setprime(int n)
{
    vector<bool> v(n + 1, 0);
    // 1 and 2 are not prime numbers!
    for (int i = 2; i * i <= n; ++i)
    {
        if (v[i] == 1)
            continue;
        for (int j = i * i; j <= n; j += i)
        {
            v[j] = 1;
        }
    }
    return v;
}

--------------------------------------------------------------------

int choose(int n, int k)
{
    if (k == 0)
        return 1;
    return (n * choose(n - 1, k - 1)) / k;
}

--------------------------------------------------------------------
